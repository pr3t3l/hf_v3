rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin of a specific family.
    function isFamilyAdmin(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId));
      // The user is an admin if they are signed in, the family document exists,
      // and their UID is in the adminUserIds list.
      return isSignedIn() &&
             familyDoc.exists &&
             (request.auth.uid in familyDoc.data.adminUserIds);
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Users can create their own profile, and can only read/update/delete their own.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for the 'families' collection.
    match /families/{familyId} {
      // A user is a member if their UID is in the memberUserIds list.
      // This rule now works correctly because memberUserIds is a List<String>.
      function isMember() {
        return isSignedIn() &&
               request.auth.uid in resource.data.memberUserIds;
      }

      // An admin is defined in the document's adminUserIds list.
      function isAdmin() {
        return isSignedIn() &&
               request.auth.uid in resource.data.adminUserIds;
      }
      
      // Members and admins can read the family document.
      allow read: if isMember() || isAdmin();
      // Only admins can update the family document.
      allow update: if isAdmin();
      // Any signed-in user can create a new family.
      allow create: if isSignedIn();
    }

    // NEW: Rules for the 'members' subcollection within each family.
    match /families/{familyId}/members/{memberUserId} {
      // An admin can read any member document.
      // A user can read their own member document.
      allow read: if isFamilyAdmin(familyId) || (isSignedIn() && request.auth.uid == memberUserId);

      // An admin can update or delete any member document.
      allow update, delete: if isFamilyAdmin(familyId);

      // An admin can create a member document.
      // A user can create their OWN member document (e.g., when joining a family).
      allow create: if isFamilyAdmin(familyId) || (isSignedIn() && request.auth.uid == memberUserId);
    }

    // Rules for the 'invitations' collection.
    match /invitations/{invitationId} {
      // Any signed-in user can create an invitation (via cloud function).
      allow create: if isSignedIn();
      // Only the invited user can read or update their own invitation.
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.invitedUserId;
    }
  }
}