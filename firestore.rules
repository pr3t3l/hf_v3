rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin of a specific family.
    function isFamilyAdmin(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId));
      return isSignedIn() &&
             familyDoc.exists &&
             (request.auth.uid in familyDoc.data.adminUserIds);
    }

    // Helper function to check if a user is a member of a specific family.
    function isFamilyMember(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId));
      return isSignedIn() &&
             familyDoc.exists &&
             (request.auth.uid in familyDoc.data.memberUserIds);
    }

    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    match /families/{familyId} {
      // This function is now context-aware of the document being read/written.
      function isMemberInDoc() {
        return isSignedIn() &&
               request.auth.uid in resource.data.memberUserIds;
      }
      
      allow read: if isMemberInDoc();
      // Allow members to update the family doc (e.g. to leave)
      // and admins to do anything.
      allow update: if isFamilyAdmin(familyId) || isMemberInDoc();
      allow create: if isSignedIn();
    }

    // Rules for the new 'members' subcollection
    match /families/{familyId}/members/{memberUserId} {
      // Any member of the family can read the details of any other member.
      allow read: if isFamilyMember(familyId);

      // Only admins can update member documents (e.g., change roles).
      allow update: if isFamilyAdmin(familyId);

      // Admins can delete any member. A user can also delete their OWN member document.
      allow delete: if isFamilyAdmin(familyId) || (isSignedIn() && request.auth.uid == memberUserId);

      // A user can create their OWN member document (when creating/joining a family). Admins can also create.
      allow create: if isFamilyAdmin(familyId) || (isSignedIn() && request.auth.uid == memberUserId);
    }

    match /invitations/{invitationId} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.invitedUserId;
    }
  }
}