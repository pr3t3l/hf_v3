rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    match /families/{familyId} {
      function isAdmin() {
        return isSignedIn() && request.auth.uid in resource.data.adminUserIds;
      }

      function isMember() {
        return isSignedIn() && request.auth.uid in resource.data.memberUserIds;
      }

      function isPending() {
        return isSignedIn() && request.auth.uid in resource.data.usersPending;
      }
      
      allow read: if isMember() || isAdmin() || isPending();
      allow update: if isAdmin();
      allow create: if isSignedIn();

      // Rules for the 'members' subcollection
      match /members/{memberId} {
        function isFamilyAdmin() {
          return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.adminUserIds;
        }

        function isFamilyMember() {
          return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberUserIds;
        }

        // Any family member can read other members' data.
        allow read: if isSignedIn() && isFamilyMember();

        // Only admins can update a member's role.
        allow update: if isSignedIn() && isFamilyAdmin();

        // Creation and deletion are handled by server-side logic (Cloud Functions).
        allow create, delete: if false;
      }
    }

    match /invitations/{invitationId} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.invitedUserId;
    }
  }
}